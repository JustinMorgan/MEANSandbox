{"name":"MEAN-Sandbox","tagline":"Playground for the MEAN stack.","body":"# MEAN-Sandbox\r\nThis is a playground project to explore Node.js and the MEAN (MongoDB, Express, Angular, and Node) stack. It's an experimental project, and very much a work in progress. **Comments, suggestions, and pull requests welcome.**\r\n\r\n#Features\r\n##Dynamic REST API generation\r\nThis is the most useful feature of the project. Given a connection string and a JSON schema list, the site will automagically wire up a REST back-end for each data type in the list.\r\n\r\n##Dynamic Angular front-end generation\r\nUsing the same schema.json file as the API factory, the front end produces an Angular CRUD SPA for each data type.\r\n\r\n##CoffeeScript and Stylus bundling\r\nAll server- and client-side scripts are written in CoffeeScript. All stylesheets are written in Stylus. In production mode, client-side (and possibly server-side) code will be precompiled, bundled together, and minified. In dev mode, client js/css is rendered on the fly.\r\n\r\n#Topics for exploration\r\nI'll be experimenting with implementation, code organization, design patterns, and best practices in various areas of Node development.\r\n- REST API\r\n- Jade view templates\r\n- SASS, LESS, and/or Stylus\r\n- Authentication\r\n- Code generation (generate API, client, and templates according to schema)\r\n- Angular model validation\r\n- Node development in CoffeeScript \r\n  - Rendering CoffeeScript assets as JS\r\n  - Performance when not precompiled\r\n- MongoDB and Mongoose\r\n  - Optimal lifecycle for connections and DB objects\r\n- Testing\r\n  - Server-side unit tests\r\n  - Angular unit tests\r\n  - Automated UI tests\r\n- Automation and package management\r\n  - Building \r\n  - Installing \r\n  - Client-side dependency management\r\n  - Bower, Yeoman, Grunt, Browserify, etc.\r\n\r\n#Setup\r\n**Note: Not tested recently; beware of missing dependencies.** This will be more automated soon.\r\n\r\n1. Pull the repo onto your filesystem and run the following:\r\n\r\n    ```\r\n    npm install -g coffee-script\r\n    npm install\r\n    ```\r\n2. Create `config.json` in the root folder. It should look something like this:\r\n\r\n    ```\r\n    {\r\n        \"env\": <\"development\" or \"production\">,\r\n        \"mongoUrl\": \"mongodb://<user>:<password>@<server-url>/<database>\"\r\n    }\r\n    ```\r\n3. Modify `schema.json` to reflect your data structure.\r\n4. Take a look at the \"known issues\" section below.\r\n\r\n#Known issues\r\n1. ~~BundleUp is broken in Express 4.0.0, see my pull request on the BundleUp project: https://github.com/Cowboy-coder/bundle-up/pull/40.~~ **RESOLVED: Now using `connect-assets` for asset management.**\r\n2. ~~Poor support for rendering SASS on the fly.~~ **RESOLVED: Now using Stylus instead, with much better results.**\r\n3. Production mode may require more configuration, especially for `connect-assets`.\r\n\r\n#Next steps\r\n- [x] Dynamically generate multiple Angular front-ends from a list of schemas. I'm already doing this on the back end with dynamic REST APIs.\r\n- [x] Dynamic Jade templates\r\n- [ ] Explore Bower and Browserify\r\n- [ ] Automate installation\r\n- [ ] Unit testing\r\n- [ ] Form validation","google":"UA-61033016-1","note":"Don't delete this file! It's used internally to help with page regeneration."}